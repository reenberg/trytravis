# os: linux and sudo: false is assumed, which means it is using container-based Ubuntu 12.04
language: python
cache: pip
# build matrix: different python and pandoc versions
python:
#  - "2.7"
  - "3.3"
#  - "3.4"
#  - "3.5"
#  - "3.5-dev" # 3.5 development branch
#  - "3.6-dev" # 3.6 development branch
#  - "nightly" # currently points to 3.7-dev
  # pypy (version info from [Changelogs â€” PyPy documentation](http://doc.pypy.org/en/latest/index-of-whatsnew.html))
#  - "pypy"  # PyPy2.7 5.3.1 (CPython 2.7 compatible)
#  - "pypy3" # PyPy3 2.4.0 (CPython 3.2 compatible)
env:
  # - pandocVersion=1.13.2
  # - pandocVersion=1.14
  # - pandocVersion=1.14.0.1
  # - pandocVersion=1.14.1
  # - pandocVersion=1.15
  # - pandocVersion=1.15.0.5
  # - pandocVersion=1.15.0.6
  # - pandocVersion=1.15.1
  # - pandocVersion=1.15.2
  # - pandocVersion=1.16
  # - pandocVersion=1.16.0.1
  # - pandocVersion=1.16.0.2
  # - pandocVersion=1.17
  # - pandocVersion=1.17.0.1
  # - pandocVersion=1.17.0.2
  # - pandocVersion=1.17.1
#  - pandocVersion=1.17.2
  # - pandocVersion=1.18
  - pandocVersion=latest
matrix:
  allow_failures:
    - python: "3.5-dev"
    - python: "3.6-dev"
    - python: "nightly"
    - python: "pypy3"
    # - env: pandocVersion=1.13.2
    # - env: pandocVersion=1.14
    # - env: pandocVersion=1.14.0.1
    # - env: pandocVersion=1.14.1
    # - env: pandocVersion=1.15
    # - env: pandocVersion=1.15.0.5
    # - env: pandocVersion=1.15.0.6
    # - env: pandocVersion=1.15.1
    # - env: pandocVersion=1.15.2
  fast_finish: true
# download pandoc
before_install:
  - |
    if [[ $pandocVersion == "latest" ]]; then
      url="https://github.com/jgm/pandoc/releases/latest"
    else
      url="https://github.com/jgm/pandoc/releases/tag/$pandocVersion"
    fi
    path=$(curl -L $url | grep -o '/jgm/pandoc/releases/download/.*-amd64\.deb')
    downloadUrl="https://github.com$path"
    file=${path##*/}
    SETUPTOOLS_VERSION=$(pip show setuptools | grep "^Version:" | cut -d' ' -f2)
# install dependencies
install:
  # pandoc
  - wget $downloadUrl &&
    sudo dpkg -i $file
  # latest pip dropped support for py3.2, which is the version of python in pypy3
  - if [[ "$TRAVIS_PYTHON_VERSION" != "pypy3" ]]; then pip install -U pip; fi
  # setup.py requires a minimum version of setuptools.  The virtual environments
  # of some of the python versions does not have a sufficiently new setuptools
  # version.
  - dpkg --compare-versions ${SETUPTOOLS_VERSION} lt 20.6.8 && pip install -U setuptools || echo "Setuptools ${SETUPTOOLS_VERSION} is suficiently new (>=20.6.8)"

  - pip install -e .[test]
before_script:
  # pasteurize for py2 only, except setup.py & pantable/version.py
  - |
    if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]] || [[ "$TRAVIS_PYTHON_VERSION" == "pypy" ]]; then
      mv setup.py setup.py.temp
      mv pantable/version.py pantable/version.py.temp
      pasteurize -wnj 4 .
      mv setup.py.temp setup.py
      mv pantable/version.py.temp pantable/version.py
    fi
# command to run tests
script:
  - make -j4 test
after_success:
  - if [[ "$pandocVersion" == "latest" ]] && [[ "$TRAVIS_PYTHON_VERSION" == "3.5" ]]; then coveralls; else printf "skip coveralls"; fi
before_deploy:
  # build unpasteurized python3 wheel
  - python3 setup.py bdist_wheel
  # pasteurize except setup.py & pantable/version.py
  - |
    mv setup.py setup.py.temp
    mv pantable/version.py pantable/version.py.temp
    pasteurize -wnj 4 .
    mv setup.py.temp setup.py
    mv pantable/version.py.temp pantable/version.py
  # prepare wheel for py2
  - pip2 install wheel
  - python2 setup.py bdist_wheel
deploy:
  provider: pypi
  user: ickc
  password: $pypi_password
  # do not add bdist_wheel here, since it is done above
  distributions: "sdist"
  skip_cleanup: true
  on:
    tags: true
    python: "3.5"
    condition: $pandocVersion = latest
